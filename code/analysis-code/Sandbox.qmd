---
title: "Untitled"
format: docx
editor: visual
---

```{r}
#Call a bunch of libraries.
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(broom)) 
suppressPackageStartupMessages(library(here))
suppressPackageStartupMessages(library(readxl)) 
suppressPackageStartupMessages(library(dplyr)) 
suppressPackageStartupMessages(library(tidyr)) 
suppressPackageStartupMessages(library(skimr))
suppressPackageStartupMessages(library(gt))
suppressPackageStartupMessages(library(dslabs))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(gapminder))
suppressPackageStartupMessages(library(kableExtra))
suppressPackageStartupMessages(library(openxlsx))
suppressPackageStartupMessages(library(xlsx))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(gt))

suppressPackageStartupMessages(library(parsnip))
suppressPackageStartupMessages(library(tune))
suppressPackageStartupMessages(library(recipes))
suppressPackageStartupMessages(library(workflows))
suppressPackageStartupMessages(library(yardstick))
suppressPackageStartupMessages(library(rsample))

#Load data
data_location <- here::here("data","processed-data","DATE_REGION.xlsx")
date_region <- readxl::read_excel(data_location)

#Narrow down to 6 specific WHO regions
date_region2 <- date_region %>% select(AFR, AMR, EMR, EUR, SEAR, WPR)

#AMR vs. ALL
lin_mod <- linear_reg() %>% set_engine("lm")
linfitA <- lin_mod %>% fit(AMR ~ ., data = date_region2)

tidy(linfitA)

# place results from fit into a data frame with the tidy function
lmtableA <- broom::tidy(linfitA)

#look at fit results
print(lmtableA)

# save fit results table  
table_fileA = here("results", "tables", "lmtableA.rds")
saveRDS(lmtableA, file = table_fileA)


```

```{r}


#EUR vs. ALL
lin_mod <- linear_reg() %>% set_engine("lm")
linfitB <- lin_mod %>% fit(EUR ~ ., data = date_region2)

tidy(linfitB)

# place results from fit into a data frame with the tidy function
lmtableB <- broom::tidy(linfitB)

#look at fit results
print(lmtableB)

# save fit results table  
table_fileB = here("results", "tables", "lmtableB.rds")
saveRDS(lmtableB, file = table_fileB)



data_location <- here::here("data","processed-data","REGION_OFFSET.xlsx")
Region_offset <- readxl::read_excel(data_location)

print(Region_offset)

# fit the linear models with AMR as outcome 
# model has ALL OTHER REGIONS as predictors
lin_mod <- linear_reg() %>% set_engine("lm")
linfit1 <- lin_mod %>% fit(AMR ~ EMR + WPR, data = Region_offset)

#model 2 -- includes date variable
lin_mod <- linear_reg() %>% set_engine("lm")
linfit2 <- lin_mod %>% fit(EUR ~ EMR + WPR + AMR, data = Region_offset)

# Compute the RMSE and R squared for model 1
metrics_1 <- linfit1 %>% 
  predict(Region_offset) %>% 
  bind_cols(Region_offset) %>% 
  metrics(truth = AMR, estimate = .pred)

# Compute the RMSE and R squared for model 2
metrics_2 <- linfit2 %>% 
  predict(Region_offset) %>% 
  bind_cols(Region_offset) %>% 
  metrics(truth = EUR, estimate = .pred)

tidy(linfit1)
print(metrics_1)

# place results from fit into a data frame with the tidy function
lmtable1 <- broom::tidy(linfit1)

#look at fit results
print(lmtable1)

# save fit results table  
table_file1 = here("results", "tables", "lmtable1.rds")
saveRDS(lmtable1, file = table_file1)

tidy(linfit2)
print(metrics_2)

# place results from fit into a data frame with the tidy function
lmtable2 <- broom::tidy(linfit2)

#look at fit results
print(lmtable2)

# save fit results table  
table_file2 = here("results", "tables", "lmtable2.rds")
saveRDS(lmtable2, file = table_file2)


#model 3 -- includes date variable
lin_mod <- linear_reg() %>% set_engine("lm")
linfit3 <- lin_mod %>% fit(AMR ~ EMR +WPR + EUR, data = Region_offset)

# Compute the RMSE and R squared for model 3
metrics_3 <- linfit3 %>% 
  predict(Region_offset) %>% 
  bind_cols(Region_offset) %>% 
  metrics(truth = AMR, estimate = .pred)

tidy(linfit3)
print(metrics_3)

# place results from fit into a data frame with the tidy function
lmtable3 <- broom::tidy(linfit3)

#look at fit results
print(lmtable3)

# save fit results table  
table_file3 = here("results", "tables", "lmtable3.rds")
saveRDS(lmtable3, file = table_file3)


```

```{r}
library(randomForest)

# Region 2 data
# Create random forest for regression 
DR_AMR.rf <- randomForest(AMR ~ ., data = date_region2, mtry = 3, 
                         importance = TRUE, na.action = na.omit) 

# Print regression model 
print(DR_AMR.rf) 


# Output to be present as PNG file  
png(file = "randomForestRegressionDR_AMR.png") 
  
# Plot the error vs the number of trees graph 
plot(DR_AMR.rf) 

```

```{r}
#Offset region data

# Create random forest for regression 
AMR.rf <- randomForest(AMR ~ ., data = Region_offset, mtry = 3, 
                         importance = TRUE, na.action = na.omit) 

# Print regression model 
print(AMR.rf) 


# Output to be present as PNG file  
png(file = "randomForestRegressionAMR.png") 
  
# Plot the error vs the number of trees graph 
plot(AMR.rf) 


```

lmfitB1 \<- lm(EUR \~ WPR + AMR + EMR, Region_offset) lmtableB1 \<- broom::tidy(lmfitB1) print(lmtableB1)

logfitB1 \<- glm(EUR \~ WPR + AMR + EMR, data = Region_offset) logtableB1 \<- broom::tidy(logfitB1) print(logtableB1)

metrics_lm1 \<- lmfitB1 %\>% predict(date_region2) %\>% bind_cols(date_region2) %\>% metrics(truth = EUR, estimate = .pred)

metrics_log1 \<- logfitB1 %\>% predict(date_region2) %\>% bind_cols(date_region2) %\>% metrics(truth = EUR, estimate = .pred)

lmfitB2 \<- lm(EUR \~ WPR + AMR + EMR, Region_offset) lmtableB1 \<- broom::tidy(lmfitB1) print(lmtableB1)

logfitB2 \<- glm(EUR \~ WPR + AMR + EMR, data = Region_offset) logtableB1 \<- broom::tidy(logfitB1) print(logtableB1)

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
